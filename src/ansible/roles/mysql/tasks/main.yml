---

- name: Install the mysql packages
  apt: name={{ item }} state=present update_cache=yes
  with_items:
    - "{{ mysql_pkgs }}"
  environment: "{{ env }}"

- name: Copy the my.cnf file
  template: src=my.cnf.j2 dest={{ mysql_conf_dir }}/my.cnf
  notify:
   - restart mysql

- debug:
    msg: "replication role: {{ mysql_repl_role }}"
    verbosity: 1
- debug:
    msg: "Server id: {{ mysql_server_id }}"
    verbosity: 1
- name: Create the directory /etc/mysql/conf.d
  file: path=/etc/mysql/conf.d state=directory
  notify:
   - restart mysql

- name: Start the mysql services
  service: name={{ mysql_service }} state=started enabled=yes


- name: update mysql root password for all root accounts
  mysql_user:
    name: root
    password: "{{ mysql_root_db_pass }}"
    host: "{{ item }}"
    login_user : root
    login_password: "{{ mysql_root_db_pass }}"
  with_items:
   - "{{ ansible_hostname }}"
   - 127.0.0.1
   - ::1
   - localhost
  when: ansible_hostname != 'localhost'

- name: update mysql root password for all root accounts
  mysql_user:
    name: root
    password: "{{ mysql_root_db_pass }}"
    host: "{{ item }}"
  with_items:
   - 127.0.0.1
   - ::1
   - localhost
  when: ansible_hostname == 'localhost'

- name: ensure anonymous users are not in the database
  mysql_user:
    name : ''
    host : "{{ item }}"
    login_user : root
    login_password : "{{ mysql_root_db_pass }}"
    state : absent
  with_items:
   - localhost
   - "{{ ansible_hostname }}"

- name: Create the database
  mysql_db:
    name : "{{ item.name }}"
    login_user : root
    login_password : "{{ mysql_root_db_pass }}"
    state : present
  with_items:
    - "{{ mysql_db }}"
  when: mysql_db|lower() != 'none'

- name: Create the database users
  mysql_user:
    name: "{{ mysql_user_name }}"
    password: "{{ mysql_user_pass }}"
    priv: "{{ mysql_user_priv }}"
    state: present
    host : "{{ item }}"
    login_user : root
    login_password : "{{ mysql_root_db_pass }}"
  with_items:
   - localhost
   - "{{ mysql_remote_host }}"

- name: Create the replication users
  mysql_user:
    name : "{{ item.name }}"
    host: "%"
    password : "{{ item.pass }}"
    priv : "*.*:REPLICATION SLAVE,REPLICATION CLIENT"
    state : present
    login_user : root
    login_password : "{{ mysql_root_db_pass }}"
  with_items:
    - "{{ mysql_repl_user }}"
  when: mysql_repl_role == 'primary'

- name: Check if replica is already configured for replication
  mysql_replication:
    mode : getreplica
    login_user : root
    login_password : "{{ mysql_root_db_pass }}"
  ignore_errors: true
  register: replica
  when: mysql_repl_role == 'replica'

- name: Get the current primary servers replication status
  mysql_replication:
    mode : getprimary
    login_user : root
    login_password : "{{ mysql_root_db_pass }}"
  delegate_to: "{{ mysql_repl_primary }}"
  register: repl_stat
  when: replica is search("Server is not configured as mysql replica") and mysql_repl_role == 'replica' and mysql_repl_primary is defined

- name: Change the primary in replica to start the replication
  mysql_replication:
    mode : changeprimary
    primary_host : "{{ mysql_repl_primary }}"
    primary_log_file : "{{ repl_stat.File }}"
    primary_log_pos : "{{ repl_stat.Position }}"
    primary_user : "{{ mysql_repl_user[0].name }}"
    primary_password : "{{ mysql_repl_user[0].pass }}"
    login_user : root
    login_password : "{{ mysql_root_db_pass }}"
  when: replica is search("Server is not configured as mysql replica") and mysql_repl_role == 'replica' and mysql_repl_primary is defined

- name: start replica in replica to start the replication
  mysql_replication:
    mode : startreplica
    login_user : root
    login_password : "{{ mysql_root_db_pass }}"
  when: replica is search("Server is not configured as mysql replica") and mysql_repl_role == 'replica' and mysql_repl_primary is defined